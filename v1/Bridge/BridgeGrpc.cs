// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v1/Bridge/bridge.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace me.jordanwood.proto.v1.bridge {
  public static partial class Handshake
  {
    static readonly string __ServiceName = "v1.proto.bridge.Handshake";

    static readonly grpc::Marshaller<global::me.jordanwood.proto.v1.bridge.ConnectionRequest> __Marshaller_v1_proto_bridge_ConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::me.jordanwood.proto.v1.bridge.ConnectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::me.jordanwood.proto.v1.bridge.ConnectionResponse> __Marshaller_v1_proto_bridge_ConnectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::me.jordanwood.proto.v1.bridge.ConnectionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::me.jordanwood.proto.v1.bridge.ConnectionRequest, global::me.jordanwood.proto.v1.bridge.ConnectionResponse> __Method_Connect = new grpc::Method<global::me.jordanwood.proto.v1.bridge.ConnectionRequest, global::me.jordanwood.proto.v1.bridge.ConnectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_v1_proto_bridge_ConnectionRequest,
        __Marshaller_v1_proto_bridge_ConnectionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::me.jordanwood.proto.v1.bridge.BridgeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Handshake</summary>
    public abstract partial class HandshakeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::me.jordanwood.proto.v1.bridge.ConnectionResponse> Connect(global::me.jordanwood.proto.v1.bridge.ConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Handshake</summary>
    public partial class HandshakeClient : grpc::ClientBase<HandshakeClient>
    {
      /// <summary>Creates a new client for Handshake</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HandshakeClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Handshake that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HandshakeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HandshakeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HandshakeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::me.jordanwood.proto.v1.bridge.ConnectionResponse Connect(global::me.jordanwood.proto.v1.bridge.ConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::me.jordanwood.proto.v1.bridge.ConnectionResponse Connect(global::me.jordanwood.proto.v1.bridge.ConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::me.jordanwood.proto.v1.bridge.ConnectionResponse> ConnectAsync(global::me.jordanwood.proto.v1.bridge.ConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::me.jordanwood.proto.v1.bridge.ConnectionResponse> ConnectAsync(global::me.jordanwood.proto.v1.bridge.ConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HandshakeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HandshakeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HandshakeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HandshakeBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::me.jordanwood.proto.v1.bridge.ConnectionRequest, global::me.jordanwood.proto.v1.bridge.ConnectionResponse>(serviceImpl.Connect));
    }

  }
  public static partial class Data
  {
    static readonly string __ServiceName = "v1.proto.bridge.Data";

    static readonly grpc::Marshaller<global::me.jordanwood.proto.v1.bridge.DataStream> __Marshaller_v1_proto_bridge_DataStream = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::me.jordanwood.proto.v1.bridge.DataStream.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::me.jordanwood.proto.v1.bridge.Token> __Marshaller_v1_proto_bridge_Token = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::me.jordanwood.proto.v1.bridge.Token.Parser.ParseFrom);

    static readonly grpc::Method<global::me.jordanwood.proto.v1.bridge.DataStream, global::me.jordanwood.proto.v1.bridge.Token> __Method_SendStream = new grpc::Method<global::me.jordanwood.proto.v1.bridge.DataStream, global::me.jordanwood.proto.v1.bridge.Token>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SendStream",
        __Marshaller_v1_proto_bridge_DataStream,
        __Marshaller_v1_proto_bridge_Token);

    static readonly grpc::Method<global::me.jordanwood.proto.v1.bridge.Token, global::me.jordanwood.proto.v1.bridge.DataStream> __Method_ReceiveStream = new grpc::Method<global::me.jordanwood.proto.v1.bridge.Token, global::me.jordanwood.proto.v1.bridge.DataStream>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReceiveStream",
        __Marshaller_v1_proto_bridge_Token,
        __Marshaller_v1_proto_bridge_DataStream);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::me.jordanwood.proto.v1.bridge.BridgeReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Data</summary>
    public abstract partial class DataBase
    {
      public virtual global::System.Threading.Tasks.Task<global::me.jordanwood.proto.v1.bridge.Token> SendStream(grpc::IAsyncStreamReader<global::me.jordanwood.proto.v1.bridge.DataStream> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ReceiveStream(global::me.jordanwood.proto.v1.bridge.Token request, grpc::IServerStreamWriter<global::me.jordanwood.proto.v1.bridge.DataStream> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Data</summary>
    public partial class DataClient : grpc::ClientBase<DataClient>
    {
      /// <summary>Creates a new client for Data</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Data that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::me.jordanwood.proto.v1.bridge.DataStream, global::me.jordanwood.proto.v1.bridge.Token> SendStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::me.jordanwood.proto.v1.bridge.DataStream, global::me.jordanwood.proto.v1.bridge.Token> SendStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendStream, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::me.jordanwood.proto.v1.bridge.DataStream> ReceiveStream(global::me.jordanwood.proto.v1.bridge.Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceiveStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::me.jordanwood.proto.v1.bridge.DataStream> ReceiveStream(global::me.jordanwood.proto.v1.bridge.Token request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReceiveStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendStream, serviceImpl.SendStream)
          .AddMethod(__Method_ReceiveStream, serviceImpl.ReceiveStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::me.jordanwood.proto.v1.bridge.DataStream, global::me.jordanwood.proto.v1.bridge.Token>(serviceImpl.SendStream));
      serviceBinder.AddMethod(__Method_ReceiveStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::me.jordanwood.proto.v1.bridge.Token, global::me.jordanwood.proto.v1.bridge.DataStream>(serviceImpl.ReceiveStream));
    }

  }
}
#endregion
